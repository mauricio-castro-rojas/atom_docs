SyBancolombia::Inscription::Payment

+ inscription: references(SyPay::PaymentMethod::Inscription)
+ delegated_inscription, polymorphic: true


Juan Pablo Castiblanco
  11:34 AM
rails generate model SyRegistry::Contract::Creator creator:references{polymorphic}:index contract:references registration_start_date:date registration_end_date:date

rails generate model Inscription::Payment delegated_inscription:references{polymorphic}:index inscription:references

t.references :severance, null: false, foreign_key: { to_table: :sy_registry_co_social_benefit_severances }, index: { name: :idx_sypayco_socben_severance_massive_file_linkeable_severanceid }
t.references :inscription, null: false, foreign_key: true

t.references :inscription, null: false, foreign_key: { to_table: :sy_pay_payment_method_inscriptions }


bundle exec rails generate logidze:model Inscription::Payment
bundle exec rails db:migrate


rails app:db:environment:set

----------------------------------------------------------------------------------------
SyBancolombia::Collection::Inscription::Payment

default_scope -> { kept}

+ kind: (inscription: 23, retirement: 25) **********
+ file: references, class_name: SyBancolombia::Collection::Inscription::Payment::File


has_many :link_responses, class_name: SyBancolombia::Collection::Inscription::Payment::Link::Response.name
has_many :responses, through: :response_links, class_name:SyBancolombia::Collection::Transaction::Payment::Response.name

rails generate model Collection::Inscription::Payment kind:integer file:references

bundle exec rails generate logidze:model Collection::Inscription::Payment

----------------------------------------------------------------------------------------


SyBancolombia::Collection::Inscription::Payment::File
+ status: enum (created, in_process, rejected. cancel, uploaded), default: :created, null: false
+ file: attached

=====
has_logidze
has_many inscription_payments, class_name: SyBancolombia::Collection::Inscription::Payment

rails generate model Collection::Inscription::Payment::File status:integer file:attachment    ***********

invoke  active_record
/Users/mauro/Documents/syapp/engines/sy_bancolombia/app/models/sy_bancolombia/collection/inscription/payment.rb:16:in `<class:Payment>': uninitialized constant SyBancolombia::Collection::Inscription::Payment::File (NameError)
	from /Users/mauro/Documents/syapp/engines/sy_bancolombia/app/models/sy_bancolombia/collection/inscription/payment.rb:2:in `<top (required)>'

  ----------------------------------------------------------------------------------------

  SyBancolombia::Collection::Inscription::Payment::Link::Response

+ inscription_payment: references, SyBancolombia::Collection::Inscription::Payment
+ response: references, class_name: SyBancolombia::Collection::Inscription::Payment::Response
+ status_bank: string
+ status_message_bank: string
+ rejection_code : enum SyBancolombia::Transaction::InscriptionRejectedCodes  ******** string? davivienda


----------------------------------------------------------------------------------------

SyBancolombia::Collection::Inscription::Payment::Response

+ status: enum (created, in_process, processed), default: created, null: false.
+ file: attacment
=====
has_many :link_responses, class_name: SyBancolombia::Collection::Inscription::Payment::Link::Response.name
has_many :inscription_payments, through: :response_links, class_name: SyBancolombia::Collection::Inscription::Payment






rails generate model Gateway::SyBancolombia name:string is_active:boolean credentials_key:string

bundle exec rails generate logidze:model SyPayCo::Gateway::Bancolombia



---------------------------------------------------------------------------------------------------------------------
Add a column to a table
In this case we are going to add a modifier to ::SyBancolombia::Collection::Inscription::Payment::File model
for daily tracking

the column should be a tring type with a limit of 1 character
rails g model --help
For integer, string, text and binary fields, an integer in curly braces will
   be set as the limit:

       `bin/rails generate model user pseudo:string{30}`

   For decimal, two integers separated by a comma in curly braces will be used
   for precision and scale:

       `bin/rails generate model product 'price:decimal{10,2}'`

   You can add a `:uniq` or `:index` suffix for unique or standard indexes
   respectively:

       `bin/rails generate model user pseudo:string:uniq`
       `bin/rails generate model user pseudo:string:index`

   You can combine any single curly brace option with the index options:

       `bin/rails generate model user username:string{30}:uniq`
       `bin/rails generate model product supplier:references{polymorphic}:index`


Command
bin/rails generate migration AddModifierToSyBancolombiaCollectionInscriptionPaymentFiles modifier:string{1}

created file:
class AddModifierToSyBancolombiaCollectionInscriptionPaymentFiles < ActiveRecord::Migration[7.0]
  def change
    add_column :sy_bancolombia_collection_inscription_payment_files, :modifier, :string, limit: 1
  end
end

move it to installer folder and change stamp
21_add_modifier_to_sy_bancolombia_collection_inscription_payment_files.rb

add it to install_generator
migration_template 'migrations/21_add_modifier_to_sy_bancolombia_collection_inscription_payment_files.rb', 'db/migrate/add_modifier_to_sy_bancolombia_collection_inscription_payment_files.rb'

install migrations in syapp terminal
rails migrations:install

rails db:migrate


bin/rails generate migration AddModifierToSyBancolombiaCollectionTransactionPaymentFiles modifier:string{1}



-----------------------------------

Error creating a SyBancolombia::Collection::Transaction::Payment object with a file_id column
referencing a File object. The first  migration has null false

class CreateSyBancolombiaCollectionTransactionPayments < ActiveRecord::Migration[7.0]
  def change
    create_table :sy_bancolombia_collection_transaction_payments do |t|
      t.references :file, null: false, index: { name: 'sy_bancolombia_collection_transaction_payments_file' }

so executing:
collection_transaction_order = ::SyBancolombia::Collection::Transaction::Payment.create!
gives
ActiveRecord::NotNullViolation: PG::NotNullViolation: ERROR:  null value in column "file_id" of
relation "sy_bancolombia_collection_transaction_payments" violates not-null constraint


Solution:

Create a migration in the engine sybancolombia
rails g migration ChangeFileInSybancolombiaCollectionTransactionPayments

edit it:
class ChangeFileInSybancolombiaCollectionTransactionPayments < ActiveRecord::Migration[7.0]
  def change
    change_column_null(:sy_bancolombia_collection_transaction_payments, :file_id, true)
  end
end

change to install folder and generator, then in syapp

rails migrations:install

rails db:migrate
